/*! \page page_installation Installation
    
    \tableofcontents
    
    \section installation_introduction Introduction
    
    PB3D is written in Fortran, and makes use of multiple numerical libraries:
        - <a href="http://www.netlib.org/lapack/">blas / lapack</a>
            - for basic linear algebra
        - <a href="http://www.netlib.org/scalapack/">pblas / blacs / scalapack</a>
            - for parallelized basic linear algebra
        - <a href="https://www.hdfgroup.org/HDF5/">HDF5</a>
            - for storage files
            - works in parallel
        - <a href="https://www.unidata.ucar.edu/software/netcdf/">NetCDF</a>
            - to read input of VMEC
            - sequential
        - <a href="https://www.mcs.anl.gov/petsc/">PETSc</a> / <a href="http://slepc.upv.es/">SLEPc</a>
            - for linear algebra of large, sparse matrices
            - can reach \f$\sim \mathcal{O} (n)\f$ complexity
        - <a href="http://portal.nersc.gov/project/sparse/strumpack/">StrumPack</a>
            - for linear algebra of structured matrices \cite Ambikasaran2013
            - can reach \f$\sim \mathcal{O} (n \log(n))\f$ complexity
        - <a href="http://vmecwiki.pppl.wikispaces.net/STELLOPT+Compilation">libstell</a>
            - part of Stellopt suite, which contains VMEC
            - provides routines to read VMEC output data

    They should probably be installed in this order. On linux distributions such as Ubuntu, they may be available as packages.
    
    Furthermore, PB3D comes bundled with some other, smaller libraries:
        - <a href="http://www.netlib.org/fftpack/">fftpack</a>
            - to calculate the fast Fourier transform
        - <a href="https://github.com/jacobwilliams/bspline-fortran">bspline-fortran</a>
            - multidimensional b-spline interpolation of data on a regular grid
        - <a href="http://foul.sourceforge.net/">foul</a>
            - the Fortran Output Library

    These do not have to be installed separately.
    
    \section installation_compilation Compilation
    
    When all dependencies are satisfied, the program is then compiled in the standard way:
        - Including the headers of all the libraries in the compilation of the object files:
            - This is done using <tt>-I[path_to_library]</tt>.
            - Make sure you add the <tt>-o</tt> option to create only object files.
        - Linking with the actual libraries
            - This is done using <tt>-L[path_to_library] -l[library_name]</tt>.
    
    \section installation_makefile Makefile Example

    \includelineno example.mk

    \note 
        -# PETSc and SLEPc don't like to be included in another makefile.
        The trick is to include two files:
        \snippetlineno example.mk PETSc and SLEPc trick
        which will load the variables  \c PETSC_FC_INCLUDES and \c SLEPC_INCLUDE, used in
        \snippetlineno example.mk PETSc and SLEPc trick inc
        as well as the variables \c PETSC_LIB and \c SLEPC_LIB, used in
        \snippetlineno example.mk PETSc and SLEPc trick lib
        -# There are versions of libstell that do not use the standard convention.
        In this case you have to look for the <tt>*.mod</tt> files.
        In the example makefile this is done with
        \snippetlineno example.mk Libstell special
        instead of the standard <tt>inc</tt> directory.
        -# In \snippetlineno example.mk PB3D include
        there are includefiles that contain macros and wrappers specifically for PB3D.
        -# In \snippetlineno example.mk PB3D libraries
        linking is done with external libraries that are bundled with PB3D.
    
    \example example.mk An example makefile:
*/

    PB3D can be obtained using git:
        \code 
        git clone https://ToonWeyens@bitbucket.org/ToonWeyens/pb3d.git
        \endcode
    
