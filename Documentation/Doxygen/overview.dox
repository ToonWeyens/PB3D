/*! \page page_overview General code structure
    
    \tableofcontents
    
    This page describes the general code structure of PB3D, as well as its accompanying post-process program POST.
    It is more complete than the documentation that can be found in \cite Weyens2017PB3D.
    
    \section overview_PB3D_flowchart PB3D flowchart
    In \ref flowchart_fig "figure 1", the top-level flowchart of PB3D is shown (adapted from \cite Weyens2017PB3D):
    
    \anchor flowchart_fig
    \image html flowchart.svg "\b Figure \b 1 \b : basic PB3D flowchart" width=40%
    \image latex flowchart.pdf "\b Figure \b 1 \b : basic PB3D flowchart" width=0.7\textwidth
    
    Roughly speaking, the main body of the code is taken up by four driver routines:
        - input driver
        - equilibrium driver
        - perturbation driver
        - solution driver

    The <b>input driver</b> sets the other drivers up by reading input options as well as quantities from equilibrium codes, and converting them to the internal PB3D format.

    The <b>equilibrium driver</b> uses these input variables to set up equilibrium quantities.
        - On the one hand these consist of flux equilibrium quantities (stored in a eq_vars.eq_1_type) that only depend on the flux coordinates, such as the pressure \f$p\f$, the safety factor \f$q\f$, etc.
        - On the other hand, they consist of metric equilibrium quantities (stored in a eq_vars.eq_2_type) that depend on the angular position as well, such as the metric quantities of the grid \f$g_{ij} = \vec{e}_i \cdot \vec{e}_j\f$ and \f$h_{ij} = \nabla u^i \cdot \nabla u^j\f$, as well as derived quantities such as the parallel current \f$\sigma = \frac{\vec{B}\cdot\vec{J}}{B^2}\f$, etc. \cite weyens2014theory


    The <b>perturbation driver</b> uses both types of equation variables to calculate perturbation quantites.
    Again, there are two types.
        - The first type of variables are the vectorial perturbation quantities (stored in a x_vars.x_1_type), which contains the geodesic component of the perturbation \f$U = \frac{\nabla \times \vec{B}}{\left|\nabla \psi\right|^2} \cdot \vec{\xi}\f$ where \f$\vec{\xi}\f$ is the perturbation.
        Also the parallel derivatives of these quantities are calculated.
        - The other type re the tensorial perturbation quantities (stored in a x_vars.x_2_type), and it combines the vectorial perturbation quantities with the equilibrium quantities to form the tensorial quantities \f$\widetilde{PV}_{k,m}^i\f$ and \f$\widetilde{KV}_{k,m}^i\f$ that represent the perturbed potential energy as well as the kinetic energy of the perturbation \cite weyens2014theory.

    These are also complemented by \f$\delta_{k,m}^\text{vac}\f$, the vacuum contribution to the perturbed potential energy (\ref fng1 "1").

    After integrating them along the magnetic field lines, these magnetic integrals form the building blocks of the discretized matrices \f$\overline{\text{A}}\f$ and \f$\overline{\text{B}}\f$ in the generalized system of eigenvalue equations \f$\overline{\text{A}} \vec{X} = \lambda \overline{\text{B}}\vec{X}\f$.
    
    These matrices are set up in the <b>solution driver</b>, which currently works with the SLEPc library that is build on the PETSc library for sparse linear algebra.
    After solution, the eigenvalues and -vectors are stored appropriately.

    Finally, it is checked whether another Richardson level should be attempted or not in <b>Richardson converged?</b>, and if so, the number of parallel grid points is doubled.

    
    \section overview_jobs Equilibrium \& Perturbation Jobs
    The general code structure explained in \ref overview_PB3D_flowchart basically comes down to setting up the matrices to be solved for the eigenvalues and eigenvectors.
    In general, the dimensions of these variables are too large (see the grids in \ref detail_PB3D) for them to fit in memory.
    A structure of two nested loops is therefore employed in PB3D, called <b>jobs</b>, to keep the memory requirements under a user-defined maximum (see \c max_tot_mem in \ref page_inputs).
    
    \subsection overview_jobs_X Perturbation jobs
    <b>perturbation jobs</b> are used to divided the calculation of the tensorial perturbation quantities, which come in pairs of mode numbers.
    These combinations are blocked, where each block fits in memory.
    These blocks are the perturbation jobs.
    
    They form the inner loop.
    
    \see See divide_x_jobs().
    
    \subsection overview_jobs_eq Equilibrium jobs
    As a result the memory still needs to hold all the relevant equilibrium and vectorial perturbation quantities necessary for the individual perturbation jobs during the whole time these jobs are being calculated.
    <b>equilibrium jobs</b> are therefore employed in an outer loop to divide these equilibrium and vectorial perturbation quantities in manageable chunks.
    
    To be more precise, the parallel range over which variables are to be integrated in the magnetic integrals (see \ref detail_PB3D), is cut in pieces.
    The advantage here is that only the results from the sub-integrals have to be saved and updated, not the function values themselves.
    
    \see See divide_eq_jobs().


    \section detail_PB3D Detailed PB3D Flowchart
    The different blocks if figure \ref flowchart_fig "1" are expanded in table \ref flowchart_PB3D_tab "1". The cells that are typeset in <span style="color:LightBlue">light blue</span> are only performed for the first equilibrium job of either the restart Richardson level, or the first Richardson level if this is not provided.
    <table>
    <caption id="flowchart_PB3D_tab">Table 1. detailed PB3D flowchart</caption>
    <tr>
        <th width="10%"> variable type </th><th width="45%"> VMEC (<tt>eq_style = 1</tt>) </th><th width="45%"> HELENA (<tt>eq_style = 2</tt>) </th>
    </tr>
    <tr>
        <td rowspan="1" bgcolor=LightGray><b> PB3D initialize </b></td><td colspan="2"> the PB3D structure is set up, such as the MPI communicator, etc.  </td>
    </tr>
    <tr>
        <td rowspan="8" bgcolor=LightGray><b> input driver </b></td><td colspan="2"> The arguments are parsed (see parse_args()) </td>
    </tr>
    <tr>
            <td colspan="2"> The input files are opened (see open_input() and \ref page_inputs) </td>
    </tr>
    <tr>
            <td colspan="2"> The user inputs are processed (see read_input_opts()) </td>
    </tr>
    <tr>
            <td colspan="2"> The equilibrium code output is read and converted to the internal PB3D format (see read_input_eq()) </td>
    </tr>
    <tr>
            <td colspan="2"> Normalization constants are calculated (see calc_normalization_const()) and the input is normalized (see normalize_input()) </td>
    </tr>
    <tr>
            <td colspan="2"> Output files are opened (see open_output() and \ref page_outputs) </td>
    </tr>
    <tr>
            <td colspan="2"> Input variables are written to HDF5 output (see print_output_in())</td>
    </tr>
    <tr>
            <td colspan="2"> Some other variables are broadcasted directly to all the processes using MPI (see broadcast_input_opts()) </td>
    </tr>
    <tr>
        <td rowspan="14" bgcolor=LightGray><b> equilibrium driver </b></td> <td> normal part of equilibrium grid is set up, as for the angular part, the field-lines are necessary which are not yet calculated </td> <td> the equilibrium grid is set up equal to the HELENA output grid </td>
    </tr>
    <tr>
            <td colspan="2"> flux equilibrium quantities (see eq_vars.eq_1_type) are calculated (see eq_ops.calc_eq()) </td>
    </tr>
    <tr>
            <td colspan="2" bgcolor=LightBlue> flux equilibrium quantities are written to HDF5 output (see eq_ops.print_output_eq()) </td>
    </tr>
    <tr>
           <td> equilibrium grid is completed by tracing the field lines (see calc_ang_grid_eq_b()) </td> <td> an additional, field-aligned equilibrium grid is set up by tracing the field lines (see setup_grid_eq_b()), and it is written to HDF5 output (see print_output_grid())  </td>
    </tr>
    <tr>
            <td> the equilibrium grid is written to output </td> <td bgcolor=LightBlue> the equilibrium grid is written to the output</td>
    </tr>
    <tr>
            <td> the metric equilibrium variables (see eq_vars.eq_2_type) are calculated (see eq_ops.calc_eq()) </td> <td bgcolor=LightBlue> the metric equilibrium variables (see eq_vars.eq_2_type) are calculated (see eq_ops.calc_eq())</td>
    </tr>
    <tr>
            <td> </td> <td bgcolor=LightBlue> the metric equilibrium variables are written to the output (see eq_ops.print_output_eq())</td>
    </tr>
    <tr>
            <td> store equilibrium quantities necessary for vacuum calculation (see store_vac()) </td> <td bgcolor=LightBlue> store equilibrium quantities necessary for vacuum calculation (see store_vac()) </td>
    </tr>
    <tr>
            <td> possible plot of magnetic field, current density and/or curvature in (field-aligned) equilibrium grid (see b_plot(), j_plot(), kappa_plot()) </td> <td bgcolor=LightBlue> possible plot of magnetic field, current density and/or curvature in (HELENA) equilibrium grid (see b_plot(), j_plot(), kappa_plot())</td>
    </tr>
    <tr>
            <td> redistribute the equilibrium grid (see redistribute_output_grid()) </td> <td bgcolor=LightBlue> redistribute the equilibrium grid (see redistribute_output_grid())</td>
    </tr>
    <tr>
            <td colspan="2" bgcolor=LightBlue> redistribute the flux equilibrium quantities (see eq_ops.redistribute_output_eq()) </td>
    </tr>
    <tr>
            <td> redistribute the metric equilibrium quantities (see eq_ops.redistribute_output_eq()) </td> <td bgcolor=LightBlue> redistribute the metric equilibrium quantities (see eq_ops.redistribute_output_eq()) </td>
    </tr>
    <tr>
            <td> </td> <td> The field-aligned equilibrium grid is redistributed (see redistribute_output_grid()) </td>
    </tr>
    <tr>
            <td colspan="2"> possible plot of magnetic field lines in flux surfaces (see magn_grid_plot()) if last equilibrium job </td>
    </tr>
    <tr>
        <td rowspan="11" bgcolor=LightGray><b> perturbation driver </b></td><td> </td> <td> the metric equilibrium quantities are inerpolated in the field-aligned equilibrium grid (see interp_hel_on_grid()) </td>
    </tr>
    <tr>
            <td> determine perturbation grid (see setup_grid_x()) and write it to HDF5 ouput (see print_output_grid()) </td> <td bgcolor=LightBlue> determine perturbation grid (see setup_grid_x()) and write it to HDF5 ouput (see print_output_grid()) </td>
    </tr>
    <tr>
            <td> </td> <td>set up field-aligned perturbation grid and write to output</td>
    </tr>
    <tr>
            <td colspan="2" bgcolor=LightBlue>set up mode number information (see setup_nm_x()) and check them (see check_x_modes()) if first perturbation job</td>
    </tr>
    <tr>
            <td colspan="2" bgcolor=LightBlue>possibly plot resonance (see resonance_plot()) if first perturbation job</td>
    </tr>
    <tr>
            <td> the vectorial perturbation variables (see x_vars.x_1_type) are calculated (see x_ops.calc_x()) </td> <td bgcolor=LightBlue> the vectorial perturbation variables (see x_vars.x_1_type) are calculated (see x_ops.calc_x()) </td>
    </tr>
    <tr>
            <td> </td> <td>write vectorial perturbation variables to output (see x_ops.print_output_x()) </td>
    </tr>
    <tr>
            <td> </td> <td> interpolate vectorial perturbation variables on field-aligned grid (see interp_hel_on_grid()) </td>
    </tr>
    <tr>
            <td colspan="2"> calculate tensorial perturbation variables (see x_ops.calc_x()) </td>
    </tr>
    <tr>
            <td colspan="2"> calculate magnetic integrals (see calc_magn_ints()) </td>
    </tr>
    <tr>
            <td colspan="2"> write magnetic integrals to output (see x_ops.print_output_x()) </td>
    </tr>
    <tr>
        <td rowspan="3" bgcolor=LightGray><b> solution driver </b></td><td>  calculate vacuum (see calc_vac()) </td> <td bgcolor=LightBlue> calculate vacuum (see calc_vac())  </td>
    </tr>
    <tr>
            <td colspan="2" bgcolor=LightBlue> set up the solution grid (see setup_grid_sol()) and write to HDF5 output (see print_output_grid()) </td>
    </tr>
    <tr>
            <td colspan="2"> solve system of equations (see solve_ev_system_slepc()) </td>
    </tr>
    <tr>
        <td rowspan="1" bgcolor=LightGray><b> Richardson converged? </b></td><td colspan="2"> check for convergence of Richardson levels by comparing solution eigenvalues (see check_conv())  </td>
    </tr>
    <tr>
        <td rowspan="1" bgcolor=LightGray><b> PB3D finalize </b></td><td colspan="2"> clean up </td>
    </tr>
    </table>


    \section overview_POST POST Overview
    The POST program for post-processing of PB3D results consists of just one driver.
        - In the first part, everything is set up (see init_post()):
            - This includes initializing the variables written to HDF5 in PB3D.
            - Furthermore, the output grids are created
            - Also, 1-D flux plots are produced, which are part of the plots that PB3D is able to produce (see \c plot_flux_q, \c plot_resonance and \c plot_magn_grid in table \ref output_plots_tab "3" in  \ref page_outputs) can be created here.
        - After that, new outputs are calculated and plot (see run_driver_post()):
            - Quantities are calculated on the output grids.
            - Using these, plots are first produced that do not depend on the solution vector from PB3D, and are also part of the plots that PB3D is able to produce (see \c plot_B, \c plot_J, \c plot_kappa in table \ref output_plots_tab "3" in  \ref page_outputs).
            - Finally, other plots are produced that do depend on these (see \c plot_sol_xi, \c plot_sol_Q, \c plot_E_rec in table \ref output_plots_tab "3" in  \ref page_outputs).

    POST also knows the concept of equilibrium jobs, but not that of perturbation jobs (see \ref overview_jobs).
    This is necessary for larger outputs that quickly overflow memory.
    The HDF5 output files are updated at every equilibrium job, but, with reasonable safety, they can already be looked at in a visualizer.


    \note
        -# \anchor fng1 This is not yet implemented.
*/
